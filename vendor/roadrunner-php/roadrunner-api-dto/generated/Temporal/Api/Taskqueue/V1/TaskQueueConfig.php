<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/taskqueue/v1/message.proto

namespace Temporal\Api\Taskqueue\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>temporal.api.taskqueue.v1.TaskQueueConfig</code>
 */
class TaskQueueConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Unless modified, this is the system-defined rate limit.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig queue_rate_limit = 1;</code>
     */
    protected $queue_rate_limit = null;
    /**
     * If set, each individual fairness key will be limited to this rate, scaled by the weight of the fairness key.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig fairness_keys_rate_limit_default = 2;</code>
     */
    protected $fairness_keys_rate_limit_default = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Temporal\Api\Taskqueue\V1\RateLimitConfig $queue_rate_limit
     *           Unless modified, this is the system-defined rate limit.
     *     @type \Temporal\Api\Taskqueue\V1\RateLimitConfig $fairness_keys_rate_limit_default
     *           If set, each individual fairness key will be limited to this rate, scaled by the weight of the fairness key.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Taskqueue\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Unless modified, this is the system-defined rate limit.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig queue_rate_limit = 1;</code>
     * @return \Temporal\Api\Taskqueue\V1\RateLimitConfig|null
     */
    public function getQueueRateLimit()
    {
        return $this->queue_rate_limit;
    }

    public function hasQueueRateLimit()
    {
        return isset($this->queue_rate_limit);
    }

    public function clearQueueRateLimit()
    {
        unset($this->queue_rate_limit);
    }

    /**
     * Unless modified, this is the system-defined rate limit.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig queue_rate_limit = 1;</code>
     * @param \Temporal\Api\Taskqueue\V1\RateLimitConfig $var
     * @return $this
     */
    public function setQueueRateLimit($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Taskqueue\V1\RateLimitConfig::class);
        $this->queue_rate_limit = $var;

        return $this;
    }

    /**
     * If set, each individual fairness key will be limited to this rate, scaled by the weight of the fairness key.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig fairness_keys_rate_limit_default = 2;</code>
     * @return \Temporal\Api\Taskqueue\V1\RateLimitConfig|null
     */
    public function getFairnessKeysRateLimitDefault()
    {
        return $this->fairness_keys_rate_limit_default;
    }

    public function hasFairnessKeysRateLimitDefault()
    {
        return isset($this->fairness_keys_rate_limit_default);
    }

    public function clearFairnessKeysRateLimitDefault()
    {
        unset($this->fairness_keys_rate_limit_default);
    }

    /**
     * If set, each individual fairness key will be limited to this rate, scaled by the weight of the fairness key.
     *
     * Generated from protobuf field <code>.temporal.api.taskqueue.v1.RateLimitConfig fairness_keys_rate_limit_default = 2;</code>
     * @param \Temporal\Api\Taskqueue\V1\RateLimitConfig $var
     * @return $this
     */
    public function setFairnessKeysRateLimitDefault($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Taskqueue\V1\RateLimitConfig::class);
        $this->fairness_keys_rate_limit_default = $var;

        return $this;
    }

}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/worker/v1/message.proto

namespace Temporal\Api\Worker\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Worker info message, contains information about the worker and its current state.
 * All information is provided by the worker itself.
 * (-- api-linter: core::0140::prepositions=disabled
 *     aip.dev/not-precedent: Removing those words make names less clear. --)
 *
 * Generated from protobuf message <code>temporal.api.worker.v1.WorkerHeartbeat</code>
 */
class WorkerHeartbeat extends \Google\Protobuf\Internal\Message
{
    /**
     * Worker identifier, should be unique for the namespace.
     * It is distinct from worker identity, which is not necessarily namespace-unique.
     *
     * Generated from protobuf field <code>string worker_instance_key = 1;</code>
     */
    protected $worker_instance_key = '';
    /**
     * Worker identity, set by the client, may not be unique.
     * Usually host_name+(user group name)+process_id, but can be overwritten by the user.
     *
     * Generated from protobuf field <code>string worker_identity = 2;</code>
     */
    protected $worker_identity = '';
    /**
     * Worker host information.
     *
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerHostInfo host_info = 3;</code>
     */
    protected $host_info = null;
    /**
     * Task queue this worker is polling for tasks.
     *
     * Generated from protobuf field <code>string task_queue = 4;</code>
     */
    protected $task_queue = '';
    /**
     * Generated from protobuf field <code>.temporal.api.deployment.v1.WorkerDeploymentVersion deployment_version = 5;</code>
     */
    protected $deployment_version = null;
    /**
     * Generated from protobuf field <code>string sdk_name = 6;</code>
     */
    protected $sdk_name = '';
    /**
     * Generated from protobuf field <code>string sdk_version = 7;</code>
     */
    protected $sdk_version = '';
    /**
     * Worker status. Defined by SDK.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.WorkerStatus status = 8;</code>
     */
    protected $status = 0;
    /**
     * Worker start time.
     * It can be used to determine worker uptime. (current time - start time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 9;</code>
     */
    protected $start_time = null;
    /**
     * Timestamp of this heartbeat, coming from the worker. Worker should set it to "now".
     * Note that this timestamp comes directly from the worker and is subject to workers' clock skew.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp heartbeat_time = 10;</code>
     */
    protected $heartbeat_time = null;
    /**
     * Elapsed time since the last heartbeat from the worker.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration elapsed_since_last_heartbeat = 11;</code>
     */
    protected $elapsed_since_last_heartbeat = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo workflow_task_slots_info = 12;</code>
     */
    protected $workflow_task_slots_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo activity_task_slots_info = 13;</code>
     */
    protected $activity_task_slots_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo nexus_task_slots_info = 14;</code>
     */
    protected $nexus_task_slots_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo local_activity_slots_info = 15;</code>
     */
    protected $local_activity_slots_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_poller_info = 16;</code>
     */
    protected $workflow_poller_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_sticky_poller_info = 17;</code>
     */
    protected $workflow_sticky_poller_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo activity_poller_info = 18;</code>
     */
    protected $activity_poller_info = null;
    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo nexus_poller_info = 19;</code>
     */
    protected $nexus_poller_info = null;
    /**
     * A Workflow Task found a cached Workflow Execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_hit = 20;</code>
     */
    protected $total_sticky_cache_hit = 0;
    /**
     * A Workflow Task did not find a cached Workflow execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_miss = 21;</code>
     */
    protected $total_sticky_cache_miss = 0;
    /**
     * Current cache size, expressed in number of Workflow Executions.
     *
     * Generated from protobuf field <code>int32 current_sticky_cache_size = 22;</code>
     */
    protected $current_sticky_cache_size = 0;
    /**
     * Plugins currently in use by this SDK.
     *
     * Generated from protobuf field <code>repeated .temporal.api.worker.v1.PluginInfo plugins = 23;</code>
     */
    private $plugins;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $worker_instance_key
     *           Worker identifier, should be unique for the namespace.
     *           It is distinct from worker identity, which is not necessarily namespace-unique.
     *     @type string $worker_identity
     *           Worker identity, set by the client, may not be unique.
     *           Usually host_name+(user group name)+process_id, but can be overwritten by the user.
     *     @type \Temporal\Api\Worker\V1\WorkerHostInfo $host_info
     *           Worker host information.
     *     @type string $task_queue
     *           Task queue this worker is polling for tasks.
     *     @type \Temporal\Api\Deployment\V1\WorkerDeploymentVersion $deployment_version
     *     @type string $sdk_name
     *     @type string $sdk_version
     *     @type int $status
     *           Worker status. Defined by SDK.
     *     @type \Google\Protobuf\Timestamp $start_time
     *           Worker start time.
     *           It can be used to determine worker uptime. (current time - start time)
     *     @type \Google\Protobuf\Timestamp $heartbeat_time
     *           Timestamp of this heartbeat, coming from the worker. Worker should set it to "now".
     *           Note that this timestamp comes directly from the worker and is subject to workers' clock skew.
     *     @type \Google\Protobuf\Duration $elapsed_since_last_heartbeat
     *           Elapsed time since the last heartbeat from the worker.
     *     @type \Temporal\Api\Worker\V1\WorkerSlotsInfo $workflow_task_slots_info
     *     @type \Temporal\Api\Worker\V1\WorkerSlotsInfo $activity_task_slots_info
     *     @type \Temporal\Api\Worker\V1\WorkerSlotsInfo $nexus_task_slots_info
     *     @type \Temporal\Api\Worker\V1\WorkerSlotsInfo $local_activity_slots_info
     *     @type \Temporal\Api\Worker\V1\WorkerPollerInfo $workflow_poller_info
     *     @type \Temporal\Api\Worker\V1\WorkerPollerInfo $workflow_sticky_poller_info
     *     @type \Temporal\Api\Worker\V1\WorkerPollerInfo $activity_poller_info
     *     @type \Temporal\Api\Worker\V1\WorkerPollerInfo $nexus_poller_info
     *     @type int $total_sticky_cache_hit
     *           A Workflow Task found a cached Workflow Execution to run against.
     *     @type int $total_sticky_cache_miss
     *           A Workflow Task did not find a cached Workflow execution to run against.
     *     @type int $current_sticky_cache_size
     *           Current cache size, expressed in number of Workflow Executions.
     *     @type \Temporal\Api\Worker\V1\PluginInfo[] $plugins
     *           Plugins currently in use by this SDK.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Worker\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Worker identifier, should be unique for the namespace.
     * It is distinct from worker identity, which is not necessarily namespace-unique.
     *
     * Generated from protobuf field <code>string worker_instance_key = 1;</code>
     * @return string
     */
    public function getWorkerInstanceKey()
    {
        return $this->worker_instance_key;
    }

    /**
     * Worker identifier, should be unique for the namespace.
     * It is distinct from worker identity, which is not necessarily namespace-unique.
     *
     * Generated from protobuf field <code>string worker_instance_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setWorkerInstanceKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->worker_instance_key = $var;

        return $this;
    }

    /**
     * Worker identity, set by the client, may not be unique.
     * Usually host_name+(user group name)+process_id, but can be overwritten by the user.
     *
     * Generated from protobuf field <code>string worker_identity = 2;</code>
     * @return string
     */
    public function getWorkerIdentity()
    {
        return $this->worker_identity;
    }

    /**
     * Worker identity, set by the client, may not be unique.
     * Usually host_name+(user group name)+process_id, but can be overwritten by the user.
     *
     * Generated from protobuf field <code>string worker_identity = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setWorkerIdentity($var)
    {
        GPBUtil::checkString($var, True);
        $this->worker_identity = $var;

        return $this;
    }

    /**
     * Worker host information.
     *
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerHostInfo host_info = 3;</code>
     * @return \Temporal\Api\Worker\V1\WorkerHostInfo|null
     */
    public function getHostInfo()
    {
        return $this->host_info;
    }

    public function hasHostInfo()
    {
        return isset($this->host_info);
    }

    public function clearHostInfo()
    {
        unset($this->host_info);
    }

    /**
     * Worker host information.
     *
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerHostInfo host_info = 3;</code>
     * @param \Temporal\Api\Worker\V1\WorkerHostInfo $var
     * @return $this
     */
    public function setHostInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerHostInfo::class);
        $this->host_info = $var;

        return $this;
    }

    /**
     * Task queue this worker is polling for tasks.
     *
     * Generated from protobuf field <code>string task_queue = 4;</code>
     * @return string
     */
    public function getTaskQueue()
    {
        return $this->task_queue;
    }

    /**
     * Task queue this worker is polling for tasks.
     *
     * Generated from protobuf field <code>string task_queue = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setTaskQueue($var)
    {
        GPBUtil::checkString($var, True);
        $this->task_queue = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.deployment.v1.WorkerDeploymentVersion deployment_version = 5;</code>
     * @return \Temporal\Api\Deployment\V1\WorkerDeploymentVersion|null
     */
    public function getDeploymentVersion()
    {
        return $this->deployment_version;
    }

    public function hasDeploymentVersion()
    {
        return isset($this->deployment_version);
    }

    public function clearDeploymentVersion()
    {
        unset($this->deployment_version);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.deployment.v1.WorkerDeploymentVersion deployment_version = 5;</code>
     * @param \Temporal\Api\Deployment\V1\WorkerDeploymentVersion $var
     * @return $this
     */
    public function setDeploymentVersion($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Deployment\V1\WorkerDeploymentVersion::class);
        $this->deployment_version = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string sdk_name = 6;</code>
     * @return string
     */
    public function getSdkName()
    {
        return $this->sdk_name;
    }

    /**
     * Generated from protobuf field <code>string sdk_name = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setSdkName($var)
    {
        GPBUtil::checkString($var, True);
        $this->sdk_name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string sdk_version = 7;</code>
     * @return string
     */
    public function getSdkVersion()
    {
        return $this->sdk_version;
    }

    /**
     * Generated from protobuf field <code>string sdk_version = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setSdkVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->sdk_version = $var;

        return $this;
    }

    /**
     * Worker status. Defined by SDK.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.WorkerStatus status = 8;</code>
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Worker status. Defined by SDK.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.WorkerStatus status = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkEnum($var, \Temporal\Api\Enums\V1\WorkerStatus::class);
        $this->status = $var;

        return $this;
    }

    /**
     * Worker start time.
     * It can be used to determine worker uptime. (current time - start time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 9;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getStartTime()
    {
        return $this->start_time;
    }

    public function hasStartTime()
    {
        return isset($this->start_time);
    }

    public function clearStartTime()
    {
        unset($this->start_time);
    }

    /**
     * Worker start time.
     * It can be used to determine worker uptime. (current time - start time)
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 9;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;

        return $this;
    }

    /**
     * Timestamp of this heartbeat, coming from the worker. Worker should set it to "now".
     * Note that this timestamp comes directly from the worker and is subject to workers' clock skew.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp heartbeat_time = 10;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getHeartbeatTime()
    {
        return $this->heartbeat_time;
    }

    public function hasHeartbeatTime()
    {
        return isset($this->heartbeat_time);
    }

    public function clearHeartbeatTime()
    {
        unset($this->heartbeat_time);
    }

    /**
     * Timestamp of this heartbeat, coming from the worker. Worker should set it to "now".
     * Note that this timestamp comes directly from the worker and is subject to workers' clock skew.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp heartbeat_time = 10;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setHeartbeatTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->heartbeat_time = $var;

        return $this;
    }

    /**
     * Elapsed time since the last heartbeat from the worker.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration elapsed_since_last_heartbeat = 11;</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getElapsedSinceLastHeartbeat()
    {
        return $this->elapsed_since_last_heartbeat;
    }

    public function hasElapsedSinceLastHeartbeat()
    {
        return isset($this->elapsed_since_last_heartbeat);
    }

    public function clearElapsedSinceLastHeartbeat()
    {
        unset($this->elapsed_since_last_heartbeat);
    }

    /**
     * Elapsed time since the last heartbeat from the worker.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration elapsed_since_last_heartbeat = 11;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setElapsedSinceLastHeartbeat($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->elapsed_since_last_heartbeat = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo workflow_task_slots_info = 12;</code>
     * @return \Temporal\Api\Worker\V1\WorkerSlotsInfo|null
     */
    public function getWorkflowTaskSlotsInfo()
    {
        return $this->workflow_task_slots_info;
    }

    public function hasWorkflowTaskSlotsInfo()
    {
        return isset($this->workflow_task_slots_info);
    }

    public function clearWorkflowTaskSlotsInfo()
    {
        unset($this->workflow_task_slots_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo workflow_task_slots_info = 12;</code>
     * @param \Temporal\Api\Worker\V1\WorkerSlotsInfo $var
     * @return $this
     */
    public function setWorkflowTaskSlotsInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerSlotsInfo::class);
        $this->workflow_task_slots_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo activity_task_slots_info = 13;</code>
     * @return \Temporal\Api\Worker\V1\WorkerSlotsInfo|null
     */
    public function getActivityTaskSlotsInfo()
    {
        return $this->activity_task_slots_info;
    }

    public function hasActivityTaskSlotsInfo()
    {
        return isset($this->activity_task_slots_info);
    }

    public function clearActivityTaskSlotsInfo()
    {
        unset($this->activity_task_slots_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo activity_task_slots_info = 13;</code>
     * @param \Temporal\Api\Worker\V1\WorkerSlotsInfo $var
     * @return $this
     */
    public function setActivityTaskSlotsInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerSlotsInfo::class);
        $this->activity_task_slots_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo nexus_task_slots_info = 14;</code>
     * @return \Temporal\Api\Worker\V1\WorkerSlotsInfo|null
     */
    public function getNexusTaskSlotsInfo()
    {
        return $this->nexus_task_slots_info;
    }

    public function hasNexusTaskSlotsInfo()
    {
        return isset($this->nexus_task_slots_info);
    }

    public function clearNexusTaskSlotsInfo()
    {
        unset($this->nexus_task_slots_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo nexus_task_slots_info = 14;</code>
     * @param \Temporal\Api\Worker\V1\WorkerSlotsInfo $var
     * @return $this
     */
    public function setNexusTaskSlotsInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerSlotsInfo::class);
        $this->nexus_task_slots_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo local_activity_slots_info = 15;</code>
     * @return \Temporal\Api\Worker\V1\WorkerSlotsInfo|null
     */
    public function getLocalActivitySlotsInfo()
    {
        return $this->local_activity_slots_info;
    }

    public function hasLocalActivitySlotsInfo()
    {
        return isset($this->local_activity_slots_info);
    }

    public function clearLocalActivitySlotsInfo()
    {
        unset($this->local_activity_slots_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerSlotsInfo local_activity_slots_info = 15;</code>
     * @param \Temporal\Api\Worker\V1\WorkerSlotsInfo $var
     * @return $this
     */
    public function setLocalActivitySlotsInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerSlotsInfo::class);
        $this->local_activity_slots_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_poller_info = 16;</code>
     * @return \Temporal\Api\Worker\V1\WorkerPollerInfo|null
     */
    public function getWorkflowPollerInfo()
    {
        return $this->workflow_poller_info;
    }

    public function hasWorkflowPollerInfo()
    {
        return isset($this->workflow_poller_info);
    }

    public function clearWorkflowPollerInfo()
    {
        unset($this->workflow_poller_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_poller_info = 16;</code>
     * @param \Temporal\Api\Worker\V1\WorkerPollerInfo $var
     * @return $this
     */
    public function setWorkflowPollerInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerPollerInfo::class);
        $this->workflow_poller_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_sticky_poller_info = 17;</code>
     * @return \Temporal\Api\Worker\V1\WorkerPollerInfo|null
     */
    public function getWorkflowStickyPollerInfo()
    {
        return $this->workflow_sticky_poller_info;
    }

    public function hasWorkflowStickyPollerInfo()
    {
        return isset($this->workflow_sticky_poller_info);
    }

    public function clearWorkflowStickyPollerInfo()
    {
        unset($this->workflow_sticky_poller_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo workflow_sticky_poller_info = 17;</code>
     * @param \Temporal\Api\Worker\V1\WorkerPollerInfo $var
     * @return $this
     */
    public function setWorkflowStickyPollerInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerPollerInfo::class);
        $this->workflow_sticky_poller_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo activity_poller_info = 18;</code>
     * @return \Temporal\Api\Worker\V1\WorkerPollerInfo|null
     */
    public function getActivityPollerInfo()
    {
        return $this->activity_poller_info;
    }

    public function hasActivityPollerInfo()
    {
        return isset($this->activity_poller_info);
    }

    public function clearActivityPollerInfo()
    {
        unset($this->activity_poller_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo activity_poller_info = 18;</code>
     * @param \Temporal\Api\Worker\V1\WorkerPollerInfo $var
     * @return $this
     */
    public function setActivityPollerInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerPollerInfo::class);
        $this->activity_poller_info = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo nexus_poller_info = 19;</code>
     * @return \Temporal\Api\Worker\V1\WorkerPollerInfo|null
     */
    public function getNexusPollerInfo()
    {
        return $this->nexus_poller_info;
    }

    public function hasNexusPollerInfo()
    {
        return isset($this->nexus_poller_info);
    }

    public function clearNexusPollerInfo()
    {
        unset($this->nexus_poller_info);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.worker.v1.WorkerPollerInfo nexus_poller_info = 19;</code>
     * @param \Temporal\Api\Worker\V1\WorkerPollerInfo $var
     * @return $this
     */
    public function setNexusPollerInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Worker\V1\WorkerPollerInfo::class);
        $this->nexus_poller_info = $var;

        return $this;
    }

    /**
     * A Workflow Task found a cached Workflow Execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_hit = 20;</code>
     * @return int
     */
    public function getTotalStickyCacheHit()
    {
        return $this->total_sticky_cache_hit;
    }

    /**
     * A Workflow Task found a cached Workflow Execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_hit = 20;</code>
     * @param int $var
     * @return $this
     */
    public function setTotalStickyCacheHit($var)
    {
        GPBUtil::checkInt32($var);
        $this->total_sticky_cache_hit = $var;

        return $this;
    }

    /**
     * A Workflow Task did not find a cached Workflow execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_miss = 21;</code>
     * @return int
     */
    public function getTotalStickyCacheMiss()
    {
        return $this->total_sticky_cache_miss;
    }

    /**
     * A Workflow Task did not find a cached Workflow execution to run against.
     *
     * Generated from protobuf field <code>int32 total_sticky_cache_miss = 21;</code>
     * @param int $var
     * @return $this
     */
    public function setTotalStickyCacheMiss($var)
    {
        GPBUtil::checkInt32($var);
        $this->total_sticky_cache_miss = $var;

        return $this;
    }

    /**
     * Current cache size, expressed in number of Workflow Executions.
     *
     * Generated from protobuf field <code>int32 current_sticky_cache_size = 22;</code>
     * @return int
     */
    public function getCurrentStickyCacheSize()
    {
        return $this->current_sticky_cache_size;
    }

    /**
     * Current cache size, expressed in number of Workflow Executions.
     *
     * Generated from protobuf field <code>int32 current_sticky_cache_size = 22;</code>
     * @param int $var
     * @return $this
     */
    public function setCurrentStickyCacheSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->current_sticky_cache_size = $var;

        return $this;
    }

    /**
     * Plugins currently in use by this SDK.
     *
     * Generated from protobuf field <code>repeated .temporal.api.worker.v1.PluginInfo plugins = 23;</code>
     * @return RepeatedField<\Temporal\Api\Worker\V1\PluginInfo>
     */
    public function getPlugins()
    {
        return $this->plugins;
    }

    /**
     * Plugins currently in use by this SDK.
     *
     * Generated from protobuf field <code>repeated .temporal.api.worker.v1.PluginInfo plugins = 23;</code>
     * @param \Temporal\Api\Worker\V1\PluginInfo[] $var
     * @return $this
     */
    public function setPlugins($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Temporal\Api\Worker\V1\PluginInfo::class);
        $this->plugins = $arr;

        return $this;
    }

}

